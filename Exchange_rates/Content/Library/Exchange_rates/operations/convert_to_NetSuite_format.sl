namespace: Exchange_rates.operations
operation:
  name: convert_to_NetSuite_format
  inputs:
    - input_list
    - banks_to_process
    - currencies
  python_action:
    script: "# Convert the CSV entries from the input_list into the NetSuite format\nimport ast\nimport datetime\n\ninput_list = ast.literal_eval(input_list)\nfields = []\noutput_list = []\nwarning_message = ''\nmessage = ''\n\nbanks_to_process = ast.literal_eval(banks_to_process)\n# Sample of banks_to_process\n# banks_to_process = [\n#     {'bank_ticker_code': 'RBA', 'currency': 'Australian Dollar', 'reference_rate': 'No'},\n#     {'bank_ticker_code': 'NBP', 'currency': 'Polish Zloty', 'reference_rate': 'Yes'},\n#     {'bank_ticker_code': 'NBRO', 'currency': 'Romanian Leu', 'reference_rate': 'Yes'}\n# ]\n\ncurrencies = ast.literal_eval(currencies)\n# Currencies sample\n# currencies = [\n#     {'iso_code': 'USD', 'name': 'USD'},\n#     {'iso_code': 'GBP', 'name': 'British pound'},\n#     {'iso_code': 'CAD', 'name': 'Canadian Dollar'},\n#     {'iso_code': 'EUR', 'name': 'Euro'},\n#     {'iso_code': 'PLN', 'name': 'Polish Zloty'},\n#     {'iso_code': 'RON', 'name': 'Romanian Leu'}\n# ]\n\nbank_codes = [bank['bank_ticker_code'] for bank in banks_to_process if bank['reference_rate'] == 'Yes']\n\n# list containing any quote factor exceptions\nfactor_exceptions = [\n    {'Base Currency': 'Russian Ruble', 'Currency': 'Chinese Yuan', 'QUOTE_FACTOR': 10}\n]\n\ntomorrow = datetime.date.today() + datetime.timedelta(days=1)\neffective_date = str(tomorrow.strftime(\"%m/%d/%Y\"))\n\n\ndef get_currency(bank_code):\n    if bank_code != '':\n        for bank in banks_to_process:\n            if bank['bank_ticker_code'] == bank_code:\n                return bank['currency']\n        return ''\n\n\ndef get_currency_from_iso(iso_currency):\n    if iso_currency != '':\n        for currency in currencies:\n            if currency['iso_code'] == iso_currency:\n                return  currency['name']\n        return ''\n\n\ndef get_currency_name(iso_input_currency, iso_input_base_currency, base_currency_name):\n    if iso_input_base_currency != '' and iso_input_base_currency != '':\n        input_currency_name = get_currency_from_iso(iso_input_currency)\n        input_base_currency_name = get_currency_from_iso(iso_input_base_currency)\n        if input_currency_name == base_currency_name:\n            return input_base_currency_name\n        else:\n            return input_currency_name\n    else:\n        return ''\n\n\ndef get_quote_factor_exception(base_currency, currency, bloomberg_quote_factor):\n    for factor_exception in factor_exceptions:\n        if factor_exception['Base Currency'] == base_currency and factor_exception['Currency'] == currency:\n            return factor_exception['QUOTE_FACTOR']\n    return bloomberg_quote_factor\n\n\ntry:\n    line_count = 0\n    for row in input_list:\n        securities_name = row['SECURITIES'].split(' ')\n        bank_code = securities_name[-2]\n        if bank_code in bank_codes:\n            # skip any lines that have an error code other than 0\n            if row['ERROR CODE'] != '0':\n                continue\n            try:\n                exchange_rate = float(row['PX_BID'])\n                quote_factor = float(row['QUOTE_FACTOR'])\n            except ValueError as e:\n                warning_message = 'Invalid float values for %s: %s, %s' % \\\n                                  (row['SECURITIES'], row['PX_BID'], row['QUOTE_FACTOR'])\n                continue\n            base_currency = get_currency(bank_code)\n            currency = get_currency_name(row['CRNCY'], row['BASE_CRNCY'], base_currency)\n            # skip any lines that don't have a valid currency value\n            if currency == '': \n                continue\n            # adjust the quote factor based on the exceptions list\n            quote_factor = get_quote_factor_exception(base_currency, currency, quote_factor)\n            converted_row = {\n                'Base Currency': base_currency,\n                'Currency': currency,\n                'Effective Date': effective_date,\n                'Exchange Rate': exchange_rate/quote_factor\n            }\n            fields = ['Base Currency', 'Currency', 'Effective Date', 'Exchange Rate']\n            output_list.append(converted_row)\n            line_count += 1\n    fields = str(fields)\n    output_list = str(output_list)\n    message = 'Converted %d lines to the NetSuite format.' % line_count\n    del tomorrow\nexcept Exception as e:\n    fields = str(fields)\n    output_list = str(output_list)\n    message = e\n    del tomorrow"
  outputs:
    - fields
    - output_list
    - effective_date
    - message
    - warning_message
  results:
    - SUCCESS
